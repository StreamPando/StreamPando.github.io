/**
 * Script de protection avanc√© pour pages s√©curis√©es
 * Version 2.0 - Am√©liorations s√©curit√© et fonctionnalit√©s
 */

// Configuration avanc√©e
const CONFIG = {
    SESSION_DURATION: 24 * 60 * 60 * 1000, // 24 heures
    LOGIN_PAGE: 'index.html',
    SESSION_WARNING_TIME: 5 * 60 * 1000, // Avertir 5 min avant expiration
    AUTO_REFRESH_INTERVAL: 10 * 60 * 1000, // Rafra√Æchir session toutes les 10 min
    SESSION_CHECK_INTERVAL: 60 * 1000, // V√©rifier la session toutes les minutes
    INACTIVITY_TIMEOUT: 60 * 60 * 1000, // D√©connexion apr√®s 1h d'inactivit√©
    DEBUG_MODE: false // Mettre √† true pour les logs de debug
};

// Variables globales
let sessionWarningShown = false;
let inactivityTimer = null;
let lastActivity = Date.now();

/**
 * Logger pour debug
 */
function debugLog(message, data = null) {
    if (CONFIG.DEBUG_MODE) {
        console.log(`[AuthProtection] ${message}`, data || '');
    }
}

/**
 * V√©rifier si l'utilisateur est authentifi√©
 */
function isAuthenticated() {
    return localStorage.getItem('isAuthenticated') === 'true';
}

/**
 * V√©rifier la validit√© de la session
 */
function isSessionValid() {
    const loginTime = localStorage.getItem('loginTime');
    
    if (!loginTime) {
        debugLog('Aucun timestamp de connexion trouv√©');
        return false;
    }
    
    const currentTime = Date.now();
    const timeDiff = currentTime - parseInt(loginTime);
    
    debugLog(`Temps √©coul√© depuis connexion: ${Math.floor(timeDiff / 60000)} minutes`);
    return timeDiff <= CONFIG.SESSION_DURATION;
}

/**
 * V√©rifier l'inactivit√© de l'utilisateur
 */
function isUserActive() {
    const timeDiff = Date.now() - lastActivity;
    debugLog(`Temps d'inactivit√©: ${Math.floor(timeDiff / 60000)} minutes`);
    return timeDiff <= CONFIG.INACTIVITY_TIMEOUT;
}

/**
 * Nettoyer toutes les donn√©es de session
 */
function clearAllSessionData() {
    const keysToRemove = [
        'isAuthenticated', 'loginTime', 'username', 'returnUrl',
        'sessionWarningShown', 'lastActivity'
    ];
    
    keysToRemove.forEach(key => localStorage.removeItem(key));
    debugLog('Toutes les donn√©es de session supprim√©es');
}

/**
 * Rediriger vers la page de connexion avec raison
 */
function redirectToLogin(reason = '', showAlert = false) {
    debugLog(`Redirection: ${reason}`);
    
    if (showAlert) {
        alert(`Session termin√©e: ${reason}`);
    }
    
    // Sauvegarder l'URL actuelle pour redirection apr√®s connexion
    localStorage.setItem('returnUrl', window.location.href);
    
    // Nettoyer et rediriger
    clearAllSessionData();
    window.location.href = CONFIG.LOGIN_PAGE;
}

/**
 * Obtenir le temps restant avant expiration
 */
function getTimeRemaining() {
    const loginTime = localStorage.getItem('loginTime');
    if (!loginTime) return 0;
    
    const elapsed = Date.now() - parseInt(loginTime);
    return Math.max(0, CONFIG.SESSION_DURATION - elapsed);
}

/**
 * Formater le temps en format lisible
 */
function formatTime(milliseconds) {
    const hours = Math.floor(milliseconds / (1000 * 60 * 60));
    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
    
    if (hours > 0) {
        return `${hours}h ${minutes}min`;
    }
    return `${minutes}min`;
}

/**
 * Afficher un avertissement d'expiration de session
 */
function showSessionWarning() {
    if (sessionWarningShown) return;
    
    sessionWarningShown = true;
    const timeRemaining = getTimeRemaining();
    
    const extend = confirm(
        `Votre session expire dans ${formatTime(timeRemaining)}.\n\n` +
        'Voulez-vous prolonger votre session ?'
    );
    
    if (extend) {
        extendSession();
        sessionWarningShown = false;
    }
}

/**
 * Prolonger la session
 */
function extendSession() {
    localStorage.setItem('loginTime', Date.now().toString());
    lastActivity = Date.now();
    debugLog('Session prolong√©e');
}

/**
 * Mettre √† jour l'activit√© de l'utilisateur
 */
function updateActivity() {
    lastActivity = Date.now();
    localStorage.setItem('lastActivity', lastActivity.toString());
    
    if (isAuthenticated()) {
        // Renouveler automatiquement la session si elle est proche d'expirer
        const timeRemaining = getTimeRemaining();
        if (timeRemaining < CONFIG.AUTO_REFRESH_INTERVAL) {
            extendSession();
        }
    }
}

/**
 * V√©rification principale d'authentification
 */
function requireAuth() {
    // V√©rifier l'authentification
    if (!isAuthenticated()) {
        redirectToLogin('Non authentifi√©');
        return false;
    }
    
    // V√©rifier la validit√© de la session
    if (!isSessionValid()) {
        redirectToLogin('Session expir√©e', true);
        return false;
    }
    
    // V√©rifier l'inactivit√©
    if (!isUserActive()) {
        redirectToLogin('D√©connexion pour inactivit√©', true);
        return false;
    }
    
    // Avertir si la session va bient√¥t expirer
    const timeRemaining = getTimeRemaining();
    if (timeRemaining <= CONFIG.SESSION_WARNING_TIME && !sessionWarningShown) {
        showSessionWarning();
    }
    
    updateActivity();
    return true;
}

/**
 * D√©connexion manuelle
 */
function logoutFromProtectedPage(confirmLogout = true) {
    if (confirmLogout && !confirm('√ätes-vous s√ªr de vouloir vous d√©connecter ?')) {
        return;
    }
    
    debugLog('D√©connexion manuelle');
    redirectToLogin('D√©connexion manuelle');
}

/**
 * Obtenir des informations d√©taill√©es sur l'utilisateur
 */
function getCurrentUser() {
    if (!isAuthenticated()) {
        return null;
    }
    
    const loginTime = parseInt(localStorage.getItem('loginTime'));
    const timeRemaining = getTimeRemaining();
    const lastActivityTime = parseInt(localStorage.getItem('lastActivity')) || loginTime;
    
    return {
        username: localStorage.getItem('username'),
        loginTime: loginTime,
        lastActivity: lastActivityTime,
        timeRemaining: timeRemaining,
        timeRemainingFormatted: formatTime(timeRemaining),
        inactivityTime: Date.now() - lastActivityTime,
        isAuthenticated: true,
        sessionValid: isSessionValid(),
        userActive: isUserActive()
    };
}

/**
 * Ajouter un bouton de d√©connexion avec styles
 */
function addLogoutButton(containerId = 'logout-container') {
    const container = document.getElementById(containerId);
    if (!container) {
        debugLog(`Conteneur ${containerId} non trouv√©`);
        return;
    }
    
    // √âviter les doublons
    if (container.querySelector('.logout-btn')) {
        debugLog('Bouton de d√©connexion d√©j√† pr√©sent');
        return;
    }
    
    const logoutBtn = document.createElement('button');
    logoutBtn.textContent = 'Se d√©connecter';
    logoutBtn.className = 'logout-btn';
    logoutBtn.title = 'Cliquez pour vous d√©connecter';
    
    // Styles de base
    logoutBtn.style.cssText = `
        border: none;
        background: transparent;
        color: black;
        padding: 0 0;
        left: 10px;
        cursor: pointer;
        font-size: 14px;
        margin: 10px 0;
        transition: background 0.3s ease;
    `;
    
    // √âv√©nements
    logoutBtn.addEventListener('click', () => logoutFromProtectedPage(true));
    logoutBtn.addEventListener('mouseover', function() {
        this.style.background = '#00000079';
    });
    logoutBtn.addEventListener('mouseout', function() {
        this.style.background = 'transparent';
    });
    
    container.appendChild(logoutBtn);
    debugLog('Bouton de d√©connexion ajout√©');
}

/**
 * Afficher les informations de session dans la console
 */
function displaySessionInfo() {
    const user = getCurrentUser();
    if (!user) {
        debugLog('Aucune session active');
        return;
    }
    
    console.group('üìä Informations de session');
    console.log('üë§ Utilisateur:', user.username);
    console.log('üïê Connect√© depuis:', new Date(user.loginTime).toLocaleString());
    console.log('‚è∞ Session expire dans:', user.timeRemainingFormatted);
    console.log('üîÑ Derni√®re activit√©:', new Date(user.lastActivity).toLocaleString());
    console.log('‚úÖ Session valide:', user.sessionValid);
    console.log('üéØ Utilisateur actif:', user.userActive);
    console.groupEnd();
}

/**
 * Surveiller l'activit√© utilisateur
 */
function setupActivityMonitoring() {
    const events = ['click', 'keypress', 'mousemove', 'scroll', 'touchstart'];
    
    events.forEach(eventType => {
        document.addEventListener(eventType, updateActivity, { passive: true });
    });
    
    debugLog('Surveillance d\'activit√© configur√©e');
}

/**
 * Configuration des v√©rifications p√©riodiques
 */
function setupPeriodicChecks() {
    // V√©rification de session principale
    setInterval(() => {
        if (!requireAuth()) {
            debugLog('V√©rification p√©riodique: session invalide');
            return;
        }
    }, CONFIG.SESSION_CHECK_INTERVAL);
    
    debugLog(`V√©rifications p√©riodiques configur√©es (${CONFIG.SESSION_CHECK_INTERVAL / 1000}s)`);
}

/**
 * Gestion de la visibilit√© de la page
 */
function setupVisibilityHandler() {
    document.addEventListener('visibilitychange', function() {
        if (!document.hidden) {
            debugLog('Page redevenue visible, v√©rification de session...');
            if (!requireAuth()) {
                return;
            }
        }
    });
}

/**
 * Gestion de la fermeture/rechargement de page
 */
function setupPageUnloadHandler() {
    window.addEventListener('beforeunload', function(e) {
        // Optionnel: avertir si des donn√©es non sauvegard√©es
        // e.preventDefault();
        // return '√ätes-vous s√ªr de vouloir quitter cette page ?';
    });
}

/**
 * Initialisation compl√®te du syst√®me de protection
 */
function initAdvancedProtection() {
    debugLog('=== Initialisation du syst√®me de protection avanc√© ===');
    
    // Restaurer la derni√®re activit√© si elle existe
    const savedActivity = localStorage.getItem('lastActivity');
    if (savedActivity) {
        lastActivity = parseInt(savedActivity);
    }
    
    // V√©rification initiale
    if (!requireAuth()) {
        return;
    }
    
    // Configurer tous les syst√®mes de surveillance
    setupActivityMonitoring();
    setupPeriodicChecks();
    setupVisibilityHandler();
    setupPageUnloadHandler();
    
    // Informations de debug
    displaySessionInfo();
    
    debugLog('‚úÖ Syst√®me de protection initialis√© avec succ√®s');
}

// =========================
// FONCTIONS UTILITAIRES
// =========================

/**
 * Forcer l'expiration de la session (pour debug)
 */
function expireSessionNow() {
    if (CONFIG.DEBUG_MODE) {
        localStorage.setItem('loginTime', (Date.now() - CONFIG.SESSION_DURATION - 1000).toString());
        debugLog('Session forc√©e √† expirer');
    }
}

/**
 * Obtenir des statistiques de session
 */
function getSessionStats() {
    const user = getCurrentUser();
    if (!user) return null;
    
    return {
        sessionDuration: CONFIG.SESSION_DURATION,
        timeElapsed: Date.now() - user.loginTime,
        timeRemaining: user.timeRemaining,
        percentageUsed: ((Date.now() - user.loginTime) / CONFIG.SESSION_DURATION * 100).toFixed(1),
        inactivityDuration: Date.now() - user.lastActivity
    };
}

// Exposer certaines fonctions globalement pour usage manuel
window.AuthProtection = {
    getCurrentUser,
    getSessionStats,
    displaySessionInfo,
    extendSession,
    logoutFromProtectedPage,
    expireSessionNow: CONFIG.DEBUG_MODE ? expireSessionNow : null
};

// Auto-initialisation
document.addEventListener('DOMContentLoaded', initAdvancedProtection);